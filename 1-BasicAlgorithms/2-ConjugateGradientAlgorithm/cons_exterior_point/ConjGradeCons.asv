function [xBest, yBest, info] = ConjGradeCons(x0, xLb, xUb, Ct, Fs, options)
 
%
% Conjugate Gradient Algorithm with Constraints (Polak-Ribiere method)
% i.e. PR-CG algorithm
% Adopt exterior penalty function method to deal with constraints
% Adopt golden section method as linear search optimization algorithm
% 
% Input arguments:
%   @x0     : Initial value of variables
%   @xLb    : Lower bound of variables
%   @xUb    : Upper bound of variables
%   @Ct     : Necessary information of sequence to be estimated
%   @Fs     : Sampling rate
%   @options: Optimization options, for more details see 'Option Defult
%             Set' in 'Preparation' part
%
% Output arguments:
%   @xBest  : Optimal point (variable)
%   @fBest  : Optimal value of object function
%   @info   : Information of the optimization process
%
% Author: Zhiyu Shen @Nanjing University
% Date  : Aug 13, 2022
%

%%% Preparation

% Input Vector Size Validation
% ---------------------------
% x0, xLb, xUb: D*1 matrix
% ---------------------------
[n, m] = size(x0);
D = n;
if m ~= 1
    error('x0 is not a column vector!')
end
[n, m] = size(xLb);
if (n ~= D) || (m ~= 1)
    error('xLb is not of a valid size!')
end
[n, m] = size(xUb);
if (n ~= D) || (m ~= 1)
    error('xUb is not of a valid size!')
end

% Option Defult Set
default.alpha           = 0.6;          % Step length for 2D search
default.penalFac        = 0.5;          % Intial penalty factor
default.iterFac         = 3;            % Iteration factor
default.delta           = 1e-9;         % Infinitesimal for calculating gradient
default.epsilonOut      = 1e-9;         % End criterion for external loop
default.epsilonIn       = 1e-9;         % End criterion for internal loop
default.stepErr         = 1e-9;         % Exit flag for 1D search
default.stepDist        = 0.05;         % 1D search distance
default.maxIterOut      = 100;          % Maximum iteration times for external loop
default.maxIterIn       = 100;          % Maximum iteration times for internal loop
default.display         = 'iter';       % Print iteration progress out on the screen
default.printMod        = 1;            % Print out every [printMod] iterations

% Set options according to user inputs
if nargin == 6
    options = MergeOptions(default, options);
else
    options = default;
end

% Assign some paramters
h = options.delta;
M = options.penalFac;
c = options.iterFac;
epsilonOut = options.epsilonOut;
epsilonIn = options.epsilonIn;
maxIterOut = options.maxIterOut;
maxIterIn = options.maxIterIn;


%%% Memory Allocation

% Allocate memory for info
info.freqVal        = zeros(1, maxIterOut);         % Frequency value of current iteration
info.phaVal         = zeros(1, maxIterOut);         % Phase value of current iteration
info.funVal         = zeros(1, maxIterOut);         % Enhanced objective function value of current iteration
info.tau            = zeros(1, maxIterOut);         % Maximum penalty function value
info.gradFreq       = zeros(1, maxIterOut);         % Frequency component of gradient of current iteration
info.gradPha        = zeros(1, maxIterOut);         % Phase component of gradient of current iteration
info.iter           = 1 : maxIterOut;


%%% Main Loop

iterOut = 1;
tau = 1;
x1 = x0 + 1;
while ((tau > epsilonOut) || (max(abs(x1 - x0)) > epsilonOut)) ...
        && (iterOut <= maxIterOut)
    
    % Update iteration point
    if iterOut ~= 1
        x0 = x1;
        M = M * c;
    end

    % Calculate function value of initial point
    xVal = x0;
    funVal = EnhObjFun(xVal, xLb, xUb, M, Ct, Fs);

    % Calculate partial differential
    xDel = diag(h * ones(D, 1));                % D * D matrix
    xInc = repmat(xVal, 1, D) + xDel;           % D * D matrix
    funValInc = EnhObjFun(xInc, xLb, xUb, M, Ct, Fs);           % 1 * D matrix
    gVal0 = ((funValInc - funVal * ones(1, D)) / h).';
    gVal = gVal0;
    dVal = zeros(D, 1);
    
    % Main loop
    iterIn = 1;
    while (max(abs(gVal)) > epsilonIn) && (iterIn <= maxIterIn)
        
        % Using PR method to calculate step length of direction updating
        bValTemp = (gVal' * (gVal - gVal0)) / (norm(gVal0))^2;
        bVal = max(bValTemp, 0);
        
        % Update 2D search direction
        dVal = -gVal + bVal .* dVal;
        
        % Optimize search step with linear search optimization algorithm
        [xVal, funVal] = StepOptim(xVal, dVal, xLb, xUb, M, Ct, Fs);
        
        % Calculate partial differential
        xInc = repmat(xVal, 1, D) + xDel;
        funValInc = EnhObjFun(xInc, xLb, xUb, M, Ct, Fs);
        gVal0 = gVal;
        gVal = ((funValInc - funVal * ones(1, D)) / h).';
    
        % Update internal iteration time
        iterIn = iterIn + 1;
    end
    
    % Result of current external iteration
    x1 = xVal;
    y1 = funVal;
    g1 = gVal;
    tau = max([(x1 - xUb); (xLb -x1)]);

    % Log Data
    info.freqVal(iterOut)   = x1(1);
    info.phaVal(iterOut)    = x1(2);
    info.funVal(iterOut)    = y1;
    info.tau(iterOut)       = tau;
    info.gradFreq(iterOut)  = abs(g1(1));
    info.gradPha(iterOut)   = abs(g1(2));

    % Print
    if strcmp('iter', options.display)
        if mod(iterOut - 1, options.printMod) == 0
            fprintf(['iter: %3d,  freq: %9.3e,  pha: %9.3e  objFun: %9.3e  ' ...
                'tau: %9.3e  freqGrad: %9.3e  phaGrad: %9.3e\n'],...
                iterOut, info.freqVal(iterOut), info.phaVal(iterOut), info.funVal(iterOut), ...
                info.tau(iterOut), info.gradFreq(iterOut), info.gradPha(iterOut));
        end
    end

    % Update external iteration time
    iterOut = iterOut + 1;

end

xBest = x1;
yBest = y1;

end



%%%% Linear Search Optimization

function [xBest, yBest] = StepOptim(x0, d0, xLb, xUb, M, Ct, Fs, options)

%
% Linear search optimization algorithm
% Optimize the step of 2D search
% Adopt golden section method
% 
% Input arguments:
%   @x0     : Initial variable value
%   @d0     : Initial search direction
%   @xLb    : Lower bound of variables
%   @xUb    : Upper bound of variables
%   @r      : Penalty factor
%   @Ct     : Necessary information of sequence to be estimated
%   @Fs     : Sampling rate
%
% Output arguments:
%   @xBest  : Optimal point (variable)
%   @fBest  : Optimal value of object function
%

%%% Initialization

% Option Defult Set
default.epsilon  = 1e-9;        % End criterion
default.distance = 0.05;        % Search distance

% Set options according to user inputs
if nargin == 8
    options = MergeOptions(default, options);
else
    options = default;
end

% Assign some paramters
epsilon = options.epsilon;
dist = options.distance;

% Calculate golden section
w1 = (sqrt(5) - 1) / 2;     % 0.618
w2 = (3 - sqrt(5)) / 2;     % 0.382

% Set initial scale
a = 0;                      % Upper bound
b = dist;                   % Lower bound

% Set initial middle points
c = a + w1 * (b - a);
d = a + w2 * (b - a);

% Calculate function value of middle points
xc = x0 + c * d0;
fc = EnhObjFun(xc, xLb, xUb, M, Ct, Fs);
xd = x0 + d * d0;
fd = EnhObjFun(xd, xLb, xUb, M, Ct, Fs);


%%% Iteration

iter = 0;
while abs(b - a) > epsilon
    
    % Update points
    if fc > fd
        % Update end points
        b = d;
        % Update end middle points
        d = c;
        c = a + w1 * (b - a);
        % Update function values
        fd = fc;
        xc = x0 + c * d0;
        fc = EnhObjFun(xc, xLb, xUb, M, Ct, Fs);
    elseif fc < fd
        % Update end points
        a = c;
        % Update end middle points
        c = d;
        d = a + w2 * (b - a);
        % Update function values
        fc = fd;
        xd = x0 + d * d0;
        fd = EnhObjFun(xd, xLb, xUb, M, Ct, Fs);
    else
        % Update end points
        a = c;
        b = d;
        % Update end middle points
        c = a + w1 * (b - a);
        d = a + w2 * (b - a);
        % Update function values
        xc = x0 + c * d0;
        fc = EnhObjFun(xc, xLb, xUb, M, Ct, Fs);
        xd = x0 + d * d0;
        fd = EnhObjFun(xd, xLb, xUb, M, Ct, Fs);
    end 

    % Update iteration time
    iter = iter + 1;

end

%%% Set output value

% Calculate function value of endpoints
xa = x0 + a * d0;
fa = EnhObjFun(xa, xLb, xUb, M, Ct, Fs);
xb = x0 + b * d0;
fb = EnhObjFun(xb, xLb, xUb, M, Ct, Fs);

% Compare function value of end points and determine output value
if fa > fb
    yBest = fa;
    xBest = xa;
else
    yBest = fb;
    xBest = xb;
end

end



%%%% Function "EnhObjFun"

function y = EnhObjFun(X, xLb, xUb, M, Ct, Fs)

%
% Computation of objective function value
% Objective function is based cross correlation coefficient
%
% Input arguments:
%   @x  : variables (including frequency and phase component)
%   @xLb: Lower bound of variables
%   @xUb: Upper bound of variables
%   @r  : Penalty factor
%   @Ct : Necessary information of sequence to be estimated
%   @Fs : Sampling rate
%
% Output arguments:
%   @y     : Objective function value of input variable
%   @penFun: Value of penalty function
%

% Fetch the size of input variable
[D, R] = size(X);
XLb = repmat(xLb, 1, R);
XUb = repmat(xUb, 1, R);

% Calculate the value of penalty function
exptIdx = 
gPlus = max([(X - XUb); (XLb -X)], zeros(2 * D, 1)).^2;
penFun = sum(gPlus);

% Calculate output value of enhanced obejct function
y = ObjFun(X, Ct, Fs) + M * penFun;

end



%%%% Function "MergeOptions"

function output = MergeOptions(default, user, name)
%
% Merge a default options struct with a user-defined options struct. Works
% recursively, and will issue warning messages if the user attempts to
% define a field that is not in the default options.
%
% DESCRIPTION:
%
% - All fields in DEFAULT will be present in OUTPUT
% - If a field is in both DEFAULT and USER, then the value from USER is
% present in OUTPUT
% - If a field is present in USER, but not DEFAULT, then issue a warning.
% - Applies recursively
%
% NOTES:
%
%   The argument "name" is optional, and contains a string specifying the
%   name of the options struct. This is primarily used for printing
%   warnings to the user.
%
%   This function works recursively. For example, if there is a struct
%   inside of a struct, then it will recursively apply this merge.
%

% Start by assuming that the OUTPUT is just the DEFAULT
output = default;

% Check if user define option name
if nargin == 2
    structName = '';
else
    structName = [name '.'];
end

% Merge user-define options with default ones
if ~isempty(user)
    % Check for any overriding fields in the USER-defined struct
    default_fields = fieldnames(default);
    for i = 1 : length(default_fields)
        if isfield(user, default_fields{i})
            C0 = isstruct(default.(default_fields{i}));
            C1 = isstruct(user.(default_fields{i}));
            if C0 && C1         % Both are structs
                output.(default_fields{i}) = MergeOptions(...
                    default.(default_fields{i}), ...
                    user.(default_fields{i}), ...
                    [structName default_fields{i}]);
            elseif ~C0 && ~C1   % Both are fields
                output.(default_fields{i}) = user.(default_fields{i});
            elseif C0 && ~C1    %default is struct, user is a field
                disp(['WARNING: ' structName default_fields{i} ' should be a struct!']);
            elseif ~C0 && C1    %default is struct, user is a field
                disp(['WARNING: ' structName default_fields{i} ' should not be a struct!']);
            end
        end
    end

    % Check for any fields in USER that are not in DEFAULT
    user_fields = fieldnames(user);
    for i = 1 : length(user_fields)
        if ~isfield(default, user_fields{i})
            disp(['WARNING: unrecognized option: ' structName user_fields{i}]);
        end
    end

end

end

